--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         268435456 B, 64 B, direct-mapped
Command:          ./column 6
Data file:        cachegrind.out.159185
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      I1mr           ILmr           Dr                     D1mr               DLmr            Dw                   D1mw               DLmw               
--------------------------------------------------------------------------------
26,803,733,273 (100.0%) 5,570 (100.0%) 3,762 (100.0%) 3,994,291,664 (100.0%) 3,471,880 (100.0%) 64,753 (100.0%) 189,915,130 (100.0%) 4,198,627 (100.0%) 2,557,976 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      I1mr           ILmr         Dr                     D1mr               DLmr            Dw                   D1mw               DLmw                file:function
--------------------------------------------------------------------------------
26,043,785,891 (97.16%) 1,165 (20.92%) 863 (22.94%) 3,720,749,452 (93.15%)   106,188 ( 3.06%)     84 ( 0.13%)      71,984 ( 0.04%)     1,060 ( 0.03%)       261 ( 0.01%)  ???:???
   569,656,556 ( 2.13%)    11 ( 0.20%)  11 ( 0.29%)   101,360,619 ( 2.54%)    30,794 ( 0.89%)      3 ( 0.00%)  25,463,651 (13.41%) 1,562,499 (37.21%)     3,515 ( 0.14%)  /global/homes/l/laa236/Smith-Waterman-Parallel/smith_waterman_column.cpp:process_block(int, int, int, int, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
   162,827,102 ( 0.61%)    37 ( 0.66%)  13 ( 0.35%)   162,527,655 ( 4.07%) 1,587,589 (45.73%)      1 ( 0.00%) 162,492,614 (85.56%) 2,532,736 (60.32%) 2,505,746 (97.96%)  ???:__memcpy_avx_unaligned_erms

--------------------------------------------------------------------------------
-- Auto-annotated source: /global/homes/l/laa236/Smith-Waterman-Parallel/smith_waterman_column.cpp
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                  D1mr            DLmr        Dw                  D1mw               DLmw           

-- line 10 ----------------------------------------
          .          .          .                   .               .           .                   .                  .              .           const int _BLOCK_SIZE_ = 64;
          .          .          .                   .               .           .                   .                  .              .           // Define gap penalties and match/mismatch scores
          .          .          .                   .               .           .                   .                  .              .           #define MATCH_SCORE 2
          .          .          .                   .               .           .                   .                  .              .           #define MISMATCH_SCORE -1
          .          .          .                   .               .           .                   .                  .              .           #define GAP_PENALTY -1
          .          .          .                   .               .           .                   .                  .              .           
          .          .          .                   .               .           .                   .                  .              .           //start and end are inclusive
          .          .          .                   .               .           .                   .                  .              .           std::tuple<int, int, int> process_block(int start_i, int end_i, int start_j, int end_j, 
     62,410 ( 0.00%) 1 ( 0.02%) 1 ( 0.03%)          0               0           0              43,687 ( 0.02%)         0              0                              std::vector<std::vector<int>>& matrix, const std::string& seq1, const std::string& seq2) {
          .          .          .                   .               .           .                   .                  .              .           
          .          .          .                   .               .           .                   .                  .              .               int match = 2;     // Score for a match
          .          .          .                   .               .           .                   .                  .              .               int mismatch = -1; // Score for a mismatch
          .          .          .                   .               .           .                   .                  .              .               int gap = -1;      // Score for a gap
          .          .          .                   .               .           .                   .                  .              .           
     18,723 ( 0.00%) 0          0                   0               0           0                   0                  0              0               int maxScore = 0;
      6,241 ( 0.00%) 0          0                   0               0           0                   0                  0              0               int maxI = 0;
      6,241 ( 0.00%) 0          0                   0               0           0                   0                  0              0               int maxJ = 0;
          .          .          .                   .               .           .                   .                  .              .           
  1,999,964 ( 0.01%) 2 ( 0.04%) 2 ( 0.05%)    401,241 ( 0.01%)      0           0               6,241 ( 0.00%)         0              0               for (size_t i = start_i; i <= end_i; ++i)
          .          .          .                   .               .           .                   .                  .              .               {
 53,573,723 ( 0.20%) 4 ( 0.07%) 4 ( 0.11%)    790,000 ( 0.02%)      0           0             395,000 ( 0.21%)         0              0                   for (size_t j = start_j; j <= end_j; ++j)
          .          .          .                   .               .           .                   .                  .              .                   {
          .          .          .                   .               .           .                   .                  .              .                       
150,000,000 ( 0.56%) 2 ( 0.04%) 2 ( 0.05%) 50,000,000 ( 1.25%)     18 ( 0.00%)  3 ( 0.00%)          0                  0              0                       int matchScore = (seq1[i - 1] == seq2[j - 1]) ? match : mismatch;
 25,000,000 ( 0.09%) 0          0                   0               0           0          25,000,000 (13.16%) 1,562,499 (37.21%) 3,515 ( 0.14%)              matrix[i][j] = std::max({0,
125,000,000 ( 0.47%) 2 ( 0.04%) 2 ( 0.05%) 25,000,000 ( 0.63%)  6,232 ( 0.18%)  0                   0                  0              0                                               matrix[i - 1][j - 1] + matchScore,
 99,210,000 ( 0.37%) 0          0          25,000,000 ( 0.63%) 24,544 ( 0.71%)  0                   0                  0              0                                               matrix[i - 1][j] + gap,
 63,290,000 ( 0.24%) 0          0                   0               0           0                   0                  0              0                                               matrix[i][j - 1] + gap});
 50,000,000 ( 0.19%) 0          0                   0               0           0                   0                  0              0                       if (matrix[i][j] > maxScore)
          .          .          .                   .               .           .                   .                  .              .                       {
          .          .          .                   .               .           .                   .                  .              .                           maxScore = matrix[i][j];
    317,487 ( 0.00%) 0          0                   0               0           0                   0                  0              0                           maxI = i;
  1,121,839 ( 0.00%) 0          0             125,691 ( 0.00%)      0           0              18,723 ( 0.01%)         0              0                           maxJ = j;
          .          .          .                   .               .           .                   .                  .              .                       }
          .          .          .                   .               .           .                   .                  .              .                   }
          .          .          .                   .               .           .                   .                  .              .               }
          .          .          .                   .               .           .                   .                  .              .               return std::make_tuple(maxScore, maxI, maxJ);
     49,928 ( 0.00%) 0          0              43,687 ( 0.00%)      0           0                   0                  0              0           }
          .          .          .                   .               .           .                   .                  .              .           
         17 ( 0.00%) 2 ( 0.04%) 2 ( 0.05%)          1 ( 0.00%)      0           0                  11 ( 0.00%)         0              0           std::pair<std::string, std::string> smithWaterman(const char *seq1, size_t size1, const char *seq2, size_t size2) {
          .          .          .                   .               .           .                   .                  .              .               int match = 2;     // Score for a match
          .          .          .                   .               .           .                   .                  .              .               int mismatch = -1; // Score for a mismatch
          .          .          .                   .               .           .                   .                  .              .               int gap = -1;      // Score for a gap
          .          .          .                   .               .           .                   .                  .              .           
          .          .          .                   .               .           .                   .                  .              .               //MATRIX ALLOCATION + TIMING HARNESS
          2 ( 0.00%) 0          0                   0               0           0                   2 ( 0.00%)         0              0               auto start = std::chrono::high_resolution_clock::now();
          2 ( 0.00%) 0          0                   0               0           0                   0                  0              0               std::vector<std::vector<int>> score(size1 + 1, std::vector<int>(size2 + 1, 0));
          1 ( 0.00%) 0          0                   0               0           0                   1 ( 0.00%)         0              0               auto end = std::chrono::high_resolution_clock::now();
          .          .          .                   .               .           .                   .                  .              .               std::chrono::duration<double> duration = end - start;
          .          .          .                   .               .           .                   .                  .              .               std::cout << "Matrix Allocation Time: " << duration.count() << " seconds" << std::endl;
          .          .          .                   .               .           .                   .                  .              .           
          .          .          .                   .               .           .                   .                  .              .               int maxScore = 0;
          .          .          .                   .               .           .                   .                  .              .               int maxI = 0, maxJ = 0;
          2 ( 0.00%) 0          0                   0               0           0                   2 ( 0.00%)         0              0               std::tuple<int, int, int> block_out;
          2 ( 0.00%) 0          0                   0               0           0                   0                  0              0               int num_blocks_seq1 = (size1 + _BLOCK_SIZE_ - 1) / _BLOCK_SIZE_;
          .          .          .                   .               .           .                   .                  .              .               //std::cout<<num_blocks_seq1<<endl;
          .          .          .                   .               .           .                   .                  .              .               //includes irregularly shaped blocks
          5 ( 0.00%) 1 ( 0.02%) 1 ( 0.03%)          0               0           0                   0                  0              0               int num_blocks_seq2 = (size2 + _BLOCK_SIZE_ - 1) / _BLOCK_SIZE_;
          .          .          .                   .               .           .                   .                  .              .               //std::cout<<num_blocks_seq2<<endl;
          .          .          .                   .               .           .                   .                  .              .           
          .          .          .                   .               .           .                   .                  .              .           
          2 ( 0.00%) 0          0                   0               0           0                   1 ( 0.00%)         0              0               start = std::chrono::high_resolution_clock::now();
      1,756 ( 0.00%) 3 ( 0.05%) 3 ( 0.08%)        874 ( 0.00%)     84 ( 0.00%) 31 ( 0.05%)        641 ( 0.00%)        80 ( 0.00%)    79 ( 0.00%)      #pragma omp parallel num_threads(num_blocks_seq1)
          .          .          .                   .               .           .                   .                  .              .               {
          .          .          .                   .               .           .                   .                  .              .                   //this will run total number of blocks per column times
         79 ( 0.00%) 0          0                   0               0           0                  79 ( 0.00%)        78 ( 0.00%)    78 ( 0.00%)          int i = omp_get_thread_num();
        316 ( 0.00%) 1 ( 0.02%) 1 ( 0.03%)         79 ( 0.00%)      0           0                   0                  0              0                   int start_i = i * _BLOCK_SIZE_ + 1;
        237 ( 0.00%) 0          0                   0               0           0                   0                  0              0                   int end_i = min(start_i + _BLOCK_SIZE_ - 1, (int)size1);
          .          .          .                   .               .           .                   .                  .              .           
     38,157 ( 0.00%) 1 ( 0.02%) 1 ( 0.03%)         79 ( 0.00%)      0           0                 158 ( 0.00%)         0              0                   for(int j = -i; j < num_blocks_seq2+num_blocks_seq1 - 1 - i; j++){
      6,241 ( 0.00%) 0          0                   0               0           0                   0                  0              0                       int start_j = j * _BLOCK_SIZE_ + 1;
      6,320 ( 0.00%) 0          0                   0               0           0                  79 ( 0.00%)         0              0                       int end_j = min(start_j + _BLOCK_SIZE_ - 1, (int)size2);
          .          .          .                   .               .           .                   .                  .              .                       
     43,450 ( 0.00%) 1 ( 0.02%) 1 ( 0.03%)      9,322 ( 0.00%)  9,152 ( 0.26%) 31 ( 0.05%)          0                  0              0                       if(j >= 0 && j < num_blocks_seq2){
     74,892 ( 0.00%) 1 ( 0.02%) 1 ( 0.03%)     37,446 ( 0.00%)    114 ( 0.00%)  1 ( 0.00%)     18,723 ( 0.01%)         0              0                           block_out = process_block(start_i, end_i, start_j, end_j, score, seq1, seq2);
          .          .          .                   .               .           .                   .                  .              .                           //#pragma omp critical
          .          .          .                   .               .           .                   .                  .              .                           //{
          .          .          .                   .               .           .                   .                  .              .                           //    cout<<start_i<<"_"<<end_i<<"|"<<start_j<<"_"<<end_j<<"|t"<<i<<endl;
          .          .          .                   .               .           .                   .                  .              .                           //}
     24,964 ( 0.00%) 0          0              18,723 ( 0.00%)      0           0                   0                  0              0                           if (std::get<0>(block_out) > maxScore) {
        237 ( 0.00%) 0          0                   0               0           0                 158 ( 0.00%)         0              0                               #pragma omp critical
          .          .          .                   .               .           .                   .                  .              .                               {
        237 ( 0.00%) 0          0                 158 ( 0.00%)      0           0                  79 ( 0.00%)         0              0                                   maxScore = std::get<0>(block_out);
        158 ( 0.00%) 0          0                  79 ( 0.00%)      0           0                  79 ( 0.00%)         0              0                                   maxI = std::get<1>(block_out);
        158 ( 0.00%) 1 ( 0.02%) 1 ( 0.03%)         79 ( 0.00%)      0           0                  79 ( 0.00%)         0              0                                   maxJ = std::get<2>(block_out);
          .          .          .                   .               .           .                   .                  .              .                               }
          .          .          .                   .               .           .                   .                  .              .                           }
          .          .          .                   .               .           .                   .                  .              .                       }
     12,403 ( 0.00%) 0          0                   0               0           0              12,403 ( 0.01%)         0              0                       #pragma omp barrier
          .          .          .                   .               .           .                   .                  .              .                       
          .          .          .                   .               .           .                   .                  .              .           
          .          .          .                   .               .           .                   .                  .              .                   } 
          .          .          .                   .               .           .                   .                  .              .               }
          1 ( 0.00%) 0          0                   0               0           0                   1 ( 0.00%)         0              0               end = std::chrono::high_resolution_clock::now();
          .          .          .                   .               .           .                   .                  .              .               duration = end - start;
          .          .          .                   .               .           .                   .                  .              .               std::cout << "Matrix Processing Time: " << duration.count() << " seconds" << std::endl;
          .          .          .                   .               .           .                   .                  .              .           
          .          .          .                   .               .           .                   .                  .              .           
          2 ( 0.00%) 1 ( 0.02%) 1 ( 0.03%)          0               0           0                   2 ( 0.00%)         1 ( 0.00%)     1 ( 0.00%)      start = std::chrono::high_resolution_clock::now();
          .          .          .                   .               .           .                   .                  .              .               // Backtrack to find the aligned sequences
          .          .          .                   .               .           .                   .                  .              .               std::string alignedSeq1, alignedSeq2;
          .          .          .                   .               .           .                   .                  .              .               size_t i = maxI, j = maxJ;
          .          .          .                   .               .           .                   .                  .              .               //BACKTRACKING
     40,082 ( 0.00%) 2 ( 0.04%) 2 ( 0.05%)     10,020 ( 0.00%)  6,844 ( 0.20%)  2 ( 0.00%)          0                  0              0               while (i > 0 && j > 0 && score[i][j] > 0)
          .          .          .                   .               .           .                   .                  .              .               {
     55,110 ( 0.00%) 0          0              20,040 ( 0.00%)    156 ( 0.00%)  0              15,030 ( 0.01%)         0              0                   if (seq1[i - 1] == seq2[j - 1])
          .          .          .                   .               .           .                   .                  .              .                   {
          .          .          .                   .               .           .                   .                  .              .                       alignedSeq1 += seq1[i - 1];
      9,980 ( 0.00%) 0          0               9,980 ( 0.00%)      0           0                   0                  0              0                       alignedSeq2 += seq2[j - 1];
      4,990 ( 0.00%) 0          0                   0               0           0                   0                  0              0                       i--;
      4,990 ( 0.00%) 0          0               4,990 ( 0.00%)      0           0                   0                  0              0                       j--;
          .          .          .                   .               .           .                   .                  .              .                   }
        100 ( 0.00%) 0          0                  40 ( 0.00%)     16 ( 0.00%)  0                   0                  0              0                   else if (score[i][j] == score[i - 1][j] + gap)
          .          .          .                   .               .           .                   .                  .              .                   {
          .          .          .                   .               .           .                   .                  .              .                       alignedSeq1 += seq1[i - 1];
          .          .          .                   .               .           .                   .                  .              .                       alignedSeq2 += '-';
         10 ( 0.00%) 0          0                   0               0           0                   0                  0              0                       i--;
          .          .          .                   .               .           .                   .                  .              .                   }
          .          .          .                   .               .           .                   .                  .              .                   else
          .          .          .                   .               .           .                   .                  .              .                   {
          .          .          .                   .               .           .                   .                  .              .                       alignedSeq1 += '-';
         20 ( 0.00%) 0          0                  20 ( 0.00%)      0           0                   0                  0              0                       alignedSeq2 += seq2[j - 1];
         10 ( 0.00%) 0          0                  10 ( 0.00%)      0           0                   0                  0              0                       j--;
          .          .          .                   .               .           .                   .                  .              .                   }
          .          .          .                   .               .           .                   .                  .              .               }
          1 ( 0.00%) 1 ( 0.02%) 1 ( 0.03%)          0               0           0                   1 ( 0.00%)         1 ( 0.00%)     0               end = std::chrono::high_resolution_clock::now();
          .          .          .                   .               .           .                   .                  .              .               duration = end - start;
          .          .          .                   .               .           .                   .                  .              .               std::cout << "Backtrack Matrix Time:  " << duration.count() << " seconds" << std::endl;
          .          .          .                   .               .           .                   .                  .              .           
          .          .          .                   .               .           .                   .                  .              .               // Reverse the aligned sequences
          .          .          .                   .               .           .                   .                  .              .               std::reverse(alignedSeq1.begin(), alignedSeq1.end());
          .          .          .                   .               .           .                   .                  .              .               std::reverse(alignedSeq2.begin(), alignedSeq2.end());
          .          .          .                   .               .           .                   .                  .              .           
          .          .          .                   .               .           .                   .                  .              .               return {alignedSeq1, alignedSeq2}; // Return the aligned sequences
         13 ( 0.00%) 0          0                   9 ( 0.00%)      3 ( 0.00%)  2 ( 0.00%)          0                  0              0           }
--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                   D1mr            DLmr        Dw                  D1mw               DLmw           
--------------------------------------------------------------------------------
569,981,503 ( 2.13%) 26 ( 0.47%) 26 ( 0.69%) 101,472,568 ( 2.54%) 47,163 ( 1.36%) 70 ( 0.11%) 25,511,180 (13.43%) 1,562,659 (37.22%) 3,673 ( 0.14%)  events annotated

